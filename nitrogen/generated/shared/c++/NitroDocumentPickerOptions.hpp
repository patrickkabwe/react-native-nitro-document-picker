///
/// NitroDocumentPickerOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroDocumentType` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentType; }

#include <vector>
#include "NitroDocumentType.hpp"
#include <optional>

namespace margelo::nitro::nitrodocumentpicker {

  /**
   * A struct which can be represented as a JavaScript object (NitroDocumentPickerOptions).
   */
  struct NitroDocumentPickerOptions {
  public:
    std::vector<NitroDocumentType> types     SWIFT_PRIVATE;
    std::optional<bool> multiple     SWIFT_PRIVATE;
    std::optional<double> maxFileSize     SWIFT_PRIVATE;
    std::optional<bool> localOnly     SWIFT_PRIVATE;

  public:
    NitroDocumentPickerOptions() = default;
    explicit NitroDocumentPickerOptions(std::vector<NitroDocumentType> types, std::optional<bool> multiple, std::optional<double> maxFileSize, std::optional<bool> localOnly): types(types), multiple(multiple), maxFileSize(maxFileSize), localOnly(localOnly) {}
  };

} // namespace margelo::nitro::nitrodocumentpicker

namespace margelo::nitro {

  using namespace margelo::nitro::nitrodocumentpicker;

  // C++ NitroDocumentPickerOptions <> JS NitroDocumentPickerOptions (object)
  template <>
  struct JSIConverter<NitroDocumentPickerOptions> final {
    static inline NitroDocumentPickerOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroDocumentPickerOptions(
        JSIConverter<std::vector<NitroDocumentType>>::fromJSI(runtime, obj.getProperty(runtime, "types")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "multiple")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "maxFileSize")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "localOnly"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroDocumentPickerOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "types", JSIConverter<std::vector<NitroDocumentType>>::toJSI(runtime, arg.types));
      obj.setProperty(runtime, "multiple", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.multiple));
      obj.setProperty(runtime, "maxFileSize", JSIConverter<std::optional<double>>::toJSI(runtime, arg.maxFileSize));
      obj.setProperty(runtime, "localOnly", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.localOnly));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::vector<NitroDocumentType>>::canConvert(runtime, obj.getProperty(runtime, "types"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "multiple"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "maxFileSize"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "localOnly"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
