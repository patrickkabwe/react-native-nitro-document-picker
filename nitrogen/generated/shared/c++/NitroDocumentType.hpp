///
/// NitroDocumentType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrodocumentpicker {

  /**
   * An enum which can be represented as a JavaScript union (NitroDocumentType).
   */
  enum class NitroDocumentType {
    PDF      SWIFT_NAME(pdf) = 0,
    DOCX      SWIFT_NAME(docx) = 1,
    XLSX      SWIFT_NAME(xlsx) = 2,
    PPTX      SWIFT_NAME(pptx) = 3,
    TXT      SWIFT_NAME(txt) = 4,
    CSV      SWIFT_NAME(csv) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrodocumentpicker

namespace margelo::nitro {

  using namespace margelo::nitro::nitrodocumentpicker;

  // C++ NitroDocumentType <> JS NitroDocumentType (union)
  template <>
  struct JSIConverter<NitroDocumentType> final {
    static inline NitroDocumentType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("pdf"): return NitroDocumentType::PDF;
        case hashString("docx"): return NitroDocumentType::DOCX;
        case hashString("xlsx"): return NitroDocumentType::XLSX;
        case hashString("pptx"): return NitroDocumentType::PPTX;
        case hashString("txt"): return NitroDocumentType::TXT;
        case hashString("csv"): return NitroDocumentType::CSV;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum NitroDocumentType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, NitroDocumentType arg) {
      switch (arg) {
        case NitroDocumentType::PDF: return JSIConverter<std::string>::toJSI(runtime, "pdf");
        case NitroDocumentType::DOCX: return JSIConverter<std::string>::toJSI(runtime, "docx");
        case NitroDocumentType::XLSX: return JSIConverter<std::string>::toJSI(runtime, "xlsx");
        case NitroDocumentType::PPTX: return JSIConverter<std::string>::toJSI(runtime, "pptx");
        case NitroDocumentType::TXT: return JSIConverter<std::string>::toJSI(runtime, "txt");
        case NitroDocumentType::CSV: return JSIConverter<std::string>::toJSI(runtime, "csv");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert NitroDocumentType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("pdf"):
        case hashString("docx"):
        case hashString("xlsx"):
        case hashString("pptx"):
        case hashString("txt"):
        case hashString("csv"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
