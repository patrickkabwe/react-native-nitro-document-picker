///
/// JNitroDocumentPickerOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroDocumentPickerOptions.hpp"

#include "JNitroDocumentType.hpp"
#include "NitroDocumentType.hpp"
#include <optional>
#include <vector>

namespace margelo::nitro::nitrodocumentpicker {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroDocumentPickerOptions" and the the Kotlin data class "NitroDocumentPickerOptions".
   */
  struct JNitroDocumentPickerOptions final: public jni::JavaClass<JNitroDocumentPickerOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrodocumentpicker/NitroDocumentPickerOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroDocumentPickerOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroDocumentPickerOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldTypes = clazz->getField<jni::JArrayClass<JNitroDocumentType>>("types");
      jni::local_ref<jni::JArrayClass<JNitroDocumentType>> types = this->getFieldValue(fieldTypes);
      static const auto fieldMultiple = clazz->getField<jni::JBoolean>("multiple");
      jni::local_ref<jni::JBoolean> multiple = this->getFieldValue(fieldMultiple);
      static const auto fieldMaxFileSize = clazz->getField<jni::JDouble>("maxFileSize");
      jni::local_ref<jni::JDouble> maxFileSize = this->getFieldValue(fieldMaxFileSize);
      return NitroDocumentPickerOptions(
        [&]() {
          size_t __size = types->size();
          std::vector<NitroDocumentType> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = types->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }(),
        multiple != nullptr ? std::make_optional(static_cast<bool>(multiple->value())) : std::nullopt,
        maxFileSize != nullptr ? std::make_optional(maxFileSize->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroDocumentPickerOptions::javaobject> fromCpp(const NitroDocumentPickerOptions& value) {
      return newInstance(
        [&]() {
          size_t __size = value.types.size();
          jni::local_ref<jni::JArrayClass<JNitroDocumentType>> __array = jni::JArrayClass<JNitroDocumentType>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.types[__i];
            __array->setElement(__i, *JNitroDocumentType::fromCpp(__element));
          }
          return __array;
        }(),
        value.multiple.has_value() ? jni::JBoolean::valueOf(value.multiple.value()) : nullptr,
        value.maxFileSize.has_value() ? jni::JDouble::valueOf(value.maxFileSize.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrodocumentpicker
