///
/// JHybridNitroDocumentPickerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroDocumentPickerSpec.hpp"

// Forward declaration of `NitroDocumentPickerResult` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { struct NitroDocumentPickerResult; }
// Forward declaration of `NitroDocumentPickerOptions` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { struct NitroDocumentPickerOptions; }
// Forward declaration of `NitroDocumentType` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentType; }
// Forward declaration of `NitroDocumentPickerOutput` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentPickerOutput; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "NitroDocumentPickerResult.hpp"
#include <NitroModules/JPromise.hpp>
#include "JNitroDocumentPickerResult.hpp"
#include <optional>
#include <string>
#include "NitroDocumentPickerOptions.hpp"
#include "JNitroDocumentPickerOptions.hpp"
#include "NitroDocumentType.hpp"
#include "JNitroDocumentType.hpp"
#include "NitroDocumentPickerOutput.hpp"
#include "JNitroDocumentPickerOutput.hpp"

namespace margelo::nitro::nitrodocumentpicker {

  jni::local_ref<JHybridNitroDocumentPickerSpec::jhybriddata> JHybridNitroDocumentPickerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroDocumentPickerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroDocumentPickerSpec::initHybrid),
    });
  }

  size_t JHybridNitroDocumentPickerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>> JHybridNitroDocumentPickerSpec::pick(const NitroDocumentPickerOptions& options) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroDocumentPickerOptions> /* options */)>("pick");
    auto __result = method(_javaPart, JNitroDocumentPickerOptions::fromCpp(options));
    return [&]() {
      auto __promise = Promise<std::vector<NitroDocumentPickerResult>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroDocumentPickerResult>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<NitroDocumentPickerResult> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrodocumentpicker
