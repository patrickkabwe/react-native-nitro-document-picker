///
/// NitroDocumentPickerResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroDocumentPickerResult`, backed by a C++ struct.
 */
public typealias NitroDocumentPickerResult = margelo.nitro.nitrodocumentpicker.NitroDocumentPickerResult

public extension NitroDocumentPickerResult {
  private typealias bridge = margelo.nitro.nitrodocumentpicker.bridge.swift

  /**
   * Create a new instance of `NitroDocumentPickerResult`.
   */
  init(path: String, base64: String?, name: String) {
    self.init(std.string(path), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = base64 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(name))
  }

  var path: String {
    @inline(__always)
    get {
      return String(self.__path)
    }
    @inline(__always)
    set {
      self.__path = std.string(newValue)
    }
  }
  
  var base64: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__base64.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__base64 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
}
