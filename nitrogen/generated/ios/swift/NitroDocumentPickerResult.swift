///
/// NitroDocumentPickerResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroDocumentPickerResult`, backed by a C++ struct.
 */
public typealias NitroDocumentPickerResult = margelo.nitro.nitrodocumentpicker.NitroDocumentPickerResult

public extension NitroDocumentPickerResult {
  private typealias bridge = margelo.nitro.nitrodocumentpicker.bridge.swift

  /**
   * Create a new instance of `NitroDocumentPickerResult`.
   */
  init(path: String, base64: String, name: String, mimeType: String, size: Double) {
    self.init(std.string(path), std.string(base64), std.string(name), std.string(mimeType), size)
  }

  var path: String {
    @inline(__always)
    get {
      return String(self.__path)
    }
    @inline(__always)
    set {
      self.__path = std.string(newValue)
    }
  }
  
  var base64: String {
    @inline(__always)
    get {
      return String(self.__base64)
    }
    @inline(__always)
    set {
      self.__base64 = std.string(newValue)
    }
  }
  
  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
  
  var mimeType: String {
    @inline(__always)
    get {
      return String(self.__mimeType)
    }
    @inline(__always)
    set {
      self.__mimeType = std.string(newValue)
    }
  }
  
  var size: Double {
    @inline(__always)
    get {
      return self.__size
    }
    @inline(__always)
    set {
      self.__size = newValue
    }
  }
}
