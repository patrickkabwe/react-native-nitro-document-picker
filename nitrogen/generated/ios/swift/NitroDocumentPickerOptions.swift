///
/// NitroDocumentPickerOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroDocumentPickerOptions`, backed by a C++ struct.
 */
public typealias NitroDocumentPickerOptions = margelo.nitro.nitrodocumentpicker.NitroDocumentPickerOptions

public extension NitroDocumentPickerOptions {
  private typealias bridge = margelo.nitro.nitrodocumentpicker.bridge.swift

  /**
   * Create a new instance of `NitroDocumentPickerOptions`.
   */
  init(types: [NitroDocumentType], multiple: Bool?, output: NitroDocumentPickerOutput?, maxFileSize: Double?) {
    self.init({ () -> bridge.std__vector_NitroDocumentType_ in
      var __vector = bridge.create_std__vector_NitroDocumentType_(types.count)
      for __item in types {
        __vector.push_back(__item)
      }
      return __vector
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = multiple {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_NitroDocumentPickerOutput_ in
      if let __unwrappedValue = output {
        return bridge.create_std__optional_NitroDocumentPickerOutput_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = maxFileSize {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var types: [NitroDocumentType] {
    @inline(__always)
    get {
      return self.__types.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__types = { () -> bridge.std__vector_NitroDocumentType_ in
        var __vector = bridge.create_std__vector_NitroDocumentType_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
  
  var multiple: Bool? {
    @inline(__always)
    get {
      return self.__multiple.value
    }
    @inline(__always)
    set {
      self.__multiple = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var output: NitroDocumentPickerOutput? {
    @inline(__always)
    get {
      return self.__output.value
    }
    @inline(__always)
    set {
      self.__output = { () -> bridge.std__optional_NitroDocumentPickerOutput_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroDocumentPickerOutput_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var maxFileSize: Double? {
    @inline(__always)
    get {
      return self.__maxFileSize.value
    }
    @inline(__always)
    set {
      self.__maxFileSize = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
