///
/// NitroDocumentPicker-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroDocumentPickerSpec` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { class HybridNitroDocumentPickerSpec; }
// Forward declaration of `NitroDocumentPickerOutput` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentPickerOutput; }
// Forward declaration of `NitroDocumentPickerResult` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { struct NitroDocumentPickerResult; }
// Forward declaration of `NitroDocumentType` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentType; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroDocumentPickerSpec_cxx` to properly resolve imports.
namespace NitroDocumentPicker { class HybridNitroDocumentPickerSpec_cxx; }

// Include C++ defined types
#include "HybridNitroDocumentPickerSpec.hpp"
#include "NitroDocumentPickerOutput.hpp"
#include "NitroDocumentPickerResult.hpp"
#include "NitroDocumentType.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrodocumentpicker::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::vector<NitroDocumentPickerResult>
  /**
   * Specialized version of `std::vector<NitroDocumentPickerResult>`.
   */
  using std__vector_NitroDocumentPickerResult_ = std::vector<NitroDocumentPickerResult>;
  inline std::vector<NitroDocumentPickerResult> create_std__vector_NitroDocumentPickerResult_(size_t size) {
    std::vector<NitroDocumentPickerResult> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>`.
   */
  using std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult___ = std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>;
  inline std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>> create_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult___() {
    return Promise<std::vector<NitroDocumentPickerResult>>::create();
  }
  inline PromiseHolder<std::vector<NitroDocumentPickerResult>> wrap_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult___(std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>> promise) {
    return PromiseHolder<std::vector<NitroDocumentPickerResult>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<NitroDocumentPickerResult>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<NitroDocumentPickerResult>&)>`.
   */
  using Func_void_std__vector_NitroDocumentPickerResult_ = std::function<void(const std::vector<NitroDocumentPickerResult>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<NitroDocumentPickerResult>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_NitroDocumentPickerResult__Wrapper final {
  public:
    explicit Func_void_std__vector_NitroDocumentPickerResult__Wrapper(std::function<void(const std::vector<NitroDocumentPickerResult>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<NitroDocumentPickerResult>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<NitroDocumentPickerResult> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<NitroDocumentPickerResult>& /* result */)>> _function;
  };
  Func_void_std__vector_NitroDocumentPickerResult_ create_Func_void_std__vector_NitroDocumentPickerResult_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_NitroDocumentPickerResult__Wrapper wrap_Func_void_std__vector_NitroDocumentPickerResult_(Func_void_std__vector_NitroDocumentPickerResult_ value) {
    return Func_void_std__vector_NitroDocumentPickerResult__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::vector<NitroDocumentType>
  /**
   * Specialized version of `std::vector<NitroDocumentType>`.
   */
  using std__vector_NitroDocumentType_ = std::vector<NitroDocumentType>;
  inline std::vector<NitroDocumentType> create_std__vector_NitroDocumentType_(size_t size) {
    std::vector<NitroDocumentType> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<NitroDocumentPickerOutput>
  /**
   * Specialized version of `std::optional<NitroDocumentPickerOutput>`.
   */
  using std__optional_NitroDocumentPickerOutput_ = std::optional<NitroDocumentPickerOutput>;
  inline std::optional<NitroDocumentPickerOutput> create_std__optional_NitroDocumentPickerOutput_(const NitroDocumentPickerOutput& value) {
    return std::optional<NitroDocumentPickerOutput>(value);
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_ = std::shared_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>;
  std::shared_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec> create_std__shared_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_(std__shared_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>
  using std__weak_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_ = std::weak_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>;
  inline std__weak_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_ weakify_std__shared_ptr_margelo__nitro__nitrodocumentpicker__HybridNitroDocumentPickerSpec_(const std::shared_ptr<margelo::nitro::nitrodocumentpicker::HybridNitroDocumentPickerSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>>
  using Result_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult____ = Result<std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult____ create_Result_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult____(const std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult____ create_Result_std__shared_ptr_Promise_std__vector_NitroDocumentPickerResult____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>>>::withError(error);
  }

} // namespace margelo::nitro::nitrodocumentpicker::bridge::swift
