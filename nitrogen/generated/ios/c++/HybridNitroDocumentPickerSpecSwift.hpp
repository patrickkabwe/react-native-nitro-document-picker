///
/// HybridNitroDocumentPickerSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroDocumentPickerSpec.hpp"

// Forward declaration of `HybridNitroDocumentPickerSpec_cxx` to properly resolve imports.
namespace NitroDocumentPicker { class HybridNitroDocumentPickerSpec_cxx; }

// Forward declaration of `NitroDocumentPickerResult` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { struct NitroDocumentPickerResult; }
// Forward declaration of `NitroDocumentPickerOptions` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { struct NitroDocumentPickerOptions; }
// Forward declaration of `NitroDocumentType` to properly resolve imports.
namespace margelo::nitro::nitrodocumentpicker { enum class NitroDocumentType; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "NitroDocumentPickerResult.hpp"
#include <string>
#include "NitroDocumentPickerOptions.hpp"
#include "NitroDocumentType.hpp"
#include <optional>

#include "NitroDocumentPicker-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrodocumentpicker {

  /**
   * The C++ part of HybridNitroDocumentPickerSpec_cxx.swift.
   *
   * HybridNitroDocumentPickerSpecSwift (C++) accesses HybridNitroDocumentPickerSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroDocumentPickerSpec_cxx can directly inherit from the C++ class HybridNitroDocumentPickerSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroDocumentPickerSpecSwift: public virtual HybridNitroDocumentPickerSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroDocumentPickerSpecSwift(const NitroDocumentPicker::HybridNitroDocumentPickerSpec_cxx& swiftPart):
      HybridObject(HybridNitroDocumentPickerSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroDocumentPicker::HybridNitroDocumentPickerSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::vector<NitroDocumentPickerResult>>> pick(const NitroDocumentPickerOptions& options) override {
      auto __result = _swiftPart.pick(options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroDocumentPicker::HybridNitroDocumentPickerSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrodocumentpicker
